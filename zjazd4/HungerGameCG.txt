  
/*
 * SUMMARY: Hunger Game;You are a programmer for The Capitol of Panem in the Hunger Games. 
	   *You are assigned with the task of displaying information on boards for each of the tributes. 
	   *You are given information regarding the entire match and its results, your job is to display who killed who.
 * AUTHOR: "Joanna Walkiewicz"
 */
`
import java.util.*;
import java.io.*;
import java.math.*;


class Tribute implements Comparable< Tribute > {			
    private String name;
    private List<String> killed = new ArrayList<>();
    private String killer;
    
    public Tribute(String name) {
        this.name=name;
    }
    
    public void addKilled(String killed){
        this.killed.add(killed);
    }
    
    public void killedBy(String killer){
        this.killer = killer;
    }
    
    public String getKilled(){
        boolean first = true;
        String out = "";
        Collections.sort(this.killed);
        for(String kname : this.killed){
            if(!first)
            {
                out = out + ", ";
            }
            out = out + kname;
            first = false;
        }
        if(out.equals(""))
        {
            return "None";
        }
        else
        {
            return out;
        }
    }
    
    public String getKiller()
    {
        if(this.killer == null)
        {
            return "Winner";
        }
        else
        {
            return this.killer;
        }
    }
    
    public String getName(){
        return this.name;
    }
    
    @Override
    public int compareTo(Tribute t) {
        return this.getName().compareTo(t.getName());
    }
}

/**
 * Auto-generated code below aims at helping you parse
 * the standard input according to the problem statement.
 **/
class Solution {

    public static void main(String args[]) {
        Scanner in = new Scanner(System.in);
        int tributes = in.nextInt();
        if (in.hasNextLine()) {
            in.nextLine();
            
        }
        List<Tribute> tlist = new ArrayList<>();
        for (int i = 0; i < tributes; i++) {
            String playerName = in.nextLine();
            tlist.add(new Tribute(playerName));
        }
        Collections.sort(tlist);
        
        int turns = in.nextInt();
        if (in.hasNextLine()) {
            in.nextLine();
        }
        for (int i = 0; i < turns; i++) {
            String info = in.nextLine();
            String[] killing = info.split(" ");
            
            String killername = "";
            Tribute killer = null;
            String killed;
            killername = killing[0];
            
            for(Tribute t : tlist)
            {
                if(t.getName().equals(killername)) {
                    killer=t;
                    break;
                }
            }
            if(killer!=null)
            {
                for(int z=2; z<killing.length; z++)
                {
                    killed = killing[z];
                    killed = killed.replace(",", "");
                    killer.addKilled(killed);
                    for(Tribute tt : tlist)
                    {
                        if(tt.getName().equals(killed))
                        {
                            tt.killedBy(killername);
                            break;
                        }
                    }
                }
            }
        }
        
        for(Tribute a : tlist)
        {
            System.out.println("Name: " + a.getName());
            System.out.println("Killed: " + a.getKilled());
            System.out.println("Killer: " + a.getKiller());
            if(tlist.indexOf(a) != (tlist.size()-1))
            {
                System.out.println();
            }
        }
    }
}
